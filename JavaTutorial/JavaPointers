1. System.out.println---> System is the class, Out is the static field of the system class and println() is the method.
2. The main() method can be overloaded but not overridden because the static method can not be overridden in Java.
3. Objects, arrays, strings, and non-primitive types are stored in the heap but their address are stored in the stack.

************************* Memory Management ***************************************************************************

1. Local variables are stored in the stack while instance variables are stored in the heap.
2. Primitive data types are stored in the stack while non-primitive ex-objects are stored in Heap and their reference/ref variable are stored in Stack memory.
3. Every Method creates its own stack.

********************************************* Primitive vs Non Primitive ************************************************************

Primitive datatypes do not have null as the default value ex byte, short, int, long, float, double, char, or boolean.
The default value for the reference variable is null for ex array, string class, interface etc.

********************************************* Static and initializer Block *********************************************

Static blocks are executed by the JVM (Java Virtual Machine) before the main method. 
static
	{
		System.out.println("Welcome to studytonight.com");
		System.out.println("This is static block I");
}
the initializer Block is used to initialize instance data members. The initializer block is executed whenever an object is created.
https://www.studytonight.com/java/static-and-initializer-block.php

********************************************* Switch ************************************************************************************
int, char, string and enum allowed.
The switch argument can be a variable expression.A case label cannot be a variable or variable expression. It must be a constant expression.
switch (x + 1) --valid
case 2 + 1: --Valid 
case x + y: --invalid

Enhanced Switch syntax: 
1-- by using arrow syntax (no need to use break)
-------------------------
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
        String day = "wed";
        String result ="";
    result = switch (day)
        {
    case "sat","sun" -> "6 a.m";
    case "mon" -> "8 a.m";
    default -> "7 a.m";
    };
    System.out.println(result);
    }
}
-------------------------
2-- use yield keyword and use : instaed of arrow

public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
        String day = "mon";
        String result ="";
    result = switch (day)
        {
    case "sat","sun" : yield "6 a.m";
    case "mon" : yield "8 a.m";
    default : yield "7 a.m";
    };
    System.out.println(result);
    }
}
********************************************* Type Casting **********************************************************************************

Casting is a process of changing one type value to another type.Two type of type casting:
widening conversion(Implicit) and Narrowing conversion(Explicit)

********************************************* Wrapper Class ***********************************************************************************

A Wrapper class in Java is used to convert a primitive data type to an object and object to a primitive type.
Data structures in the Collection framework, such as ArrayList and Vector, store only objects (reference types) and not primitive types.

Autoboxing and Unboxing
------------------------

Autoboxing : The automatic conversion of primitive types to the object of their corresponding wrapper classes is known as autoboxing. For example – conversion of int to Integer, long to Long, double to Double, etc. 
Example:
---------
class Main {
   public static void main(String[] args) {

      ArrayList<Integer> list = new ArrayList<>();

      //autoboxing
      list.add(5);
      list.add(6);

      System.out.println("ArrayList: " + list);
   }
}

Unboxing: Automatically converting an object of a wrapper class to its corresponding primitive type is known as unboxing. For example – conversion of Integer to int, Long to long, Double to double, etc. 
Example:
--------
class Main {
   public static void main(String[] args) {

      ArrayList<Integer> list = new ArrayList<>();

      //autoboxing
      list.add(5);
      list.add(6);

      System.out.println("ArrayList: " + list);

      // unboxing
      int a = list.get(0);
      System.out.println("Value at index 0: " + a);
   }
}

******************************************************** For Each Loop ****************************************************************************************************************

1. For-each loop is not appropriate when you want to modify the array:
2. For-Each loop do not keep track of the index.
3. For-each only iterates forward over the array in single steps.
4. 

OBJECT CLASS :
********************************************************
Object class is present in java.lang package. Every class in Java is directly or indirectly derived from the Object class.
If a Class does not extend any other class then it is a direct child class of Object and if it extends another class then it is
indirectly derived. Therefore the Object class methods are available to all Java classes. Hence, the Object class acts as
a root of the inheritance hierarchy in any Java Program.

There are methods in the Object class:
toString(), hashCode(), equals(Object obj), getClass(), finalize(), clone(), etc.

NUMBER CLASS :
********************************************************
Most of the time, while working with numbers in Java, we use primitive data types. But, Java also provides various
numeric wrapper subclasses under the abstract class Number present in java.lang package. There are mainly six subclasses
under the Number class. These sub-classes define some useful methods that are used frequently while dealing with numbers.
Byte, Integer, Double, Short, Float, Long
NOTE: Primitive Wrapper Classes are Immutable in Java.


********* Java sample prog using stream ******************
https://blog.devgenius.io/java-8-coding-and-programming-interview-questions-and-answers-62512c44f062
