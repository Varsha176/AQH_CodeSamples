*************** Array Pointers ****************************
Arrays Class
-------------
package: import java.util.Arrays;

1. To sort use Arrays.sort(arr) --this method internally uses the quicksort algorithm. To sort characters it uses unicode values.
2. To sort some parts of an array use Arrays.sort(arr,from index,to index)
3. To compare arrays use Arrays.equals(arr1,arr2)
4. To print Arrays without using for loop we can use Arrays.toString(arr).
5. To print multidimensional arrays Use Arrays.deepToString(arr).
6. To get the pos of the element using binary search algo use Arrays.binarySearch(intArr, int Key)
7. To COPY Array uses Arrays.copyOf(original array, new length), Arrays.copyOfRange(intArr, startIndex, lastIndex)
8. To compare Arrays.equals(intArr, intArr1)
9. Array.clone() to create/clone temo array.


https://www.freecodecamp.org/news/java-interview-prep-handbook/


****************************** String Pointers **********************************************************  

1. The string pool is inside heap memory. Two ways to create a string --1(Using literal), 2-- Using New Keyword.
2. Each time we create a String literal, the JVM checks the string pool first. If the string literal already exists in the pool, a reference to the pool instance is returned.
   If a string does not exist in the pool, a new string object is created and placed in the pool.
When we create a String using a new keyword it creates an object in the non-string pool area of the heap.
3. java. lang.String class is used to create a string object.
4. Immutability is required for security and synchronization(thread safety).
5. use equals() method to check value and (==) to check both value and reference.compareTo() to check if string are (>,=,<)

********************************************************** String class methods **********************************************************  

** StringBuffer & StringBuilder uses heap memory to store objects.


1. indexOf(char),indexOf(char,position), indexOf(substring), indexOf(substring,position)
2. replace(original,new)
3. substring(int begin, int end),substring(int begin)
4. contains()
5. endsWith()
6. isEmpty() 
7. startsWith()
8. matches(String regex)
9. split(String regex)
10. repeat(int count)
11. 

___________ StringBuffer/StringBuilder class Methods ___________
1. append()
2. insert(int index, String str), insert(int index, int num), insert(int index, obj)
3. reverse()
4. replace(int index, end index, string)
5. setCharAt(index, ch)


To make only first character of string as upper case use substring method: example -hello java --Hello Java
string.substring(0,1).toUpperCase()+string.Substring(1); //lastindex not included in substring function.



