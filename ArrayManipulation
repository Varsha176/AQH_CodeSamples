************** Sort Array by 0 and 1 ***************

class HelloWorld {
    public static void main(String[] args) {
     {
          int arr[] = new int[]{ 0, 1, 0, 1, 1, 1 }; 
          int count = 0;
          for(int i=0;i<arr.length;i++)
          {
              if(arr[i]==0)
              {
                  count++;
              }
          }
          for(int i=0;i<count;i++)
          {
              arr[i]=0;
          }
          for(int i=count;i<arr.length;i++)
          {
              arr[i]=1;
          }
          for(int i=0;i<arr.length;i++)
          {
              System.out.println(arr[i]);
          }
      
     }
    }
}
***************** Find Missing number in an array *****************
Input: arr[] = {1, 2, 4, 6, 3, 7, 8}
Output: 5

class GFG {

    // Function to find the missing number
    public static int getMissingNo(int[] nums, int n)
    {
       int sum = 0;
        for(int i=0;i<n;i++){
            sum = sum + nums[i];
        }
        return ((n * (n+1))/2 - sum);
    }

    // Driver code
    public static void main(String[] args)
    {
        int[] arr = { 1, 2, 3, 5 };
        int N = arr.length;
        System.out.println(getMissingNo(arr, N));
    }
}
***************** Find Lonely integer in an ARRAY *****************

i/p -- arr[] = {1,2,3,4,3,2,1}
o/p-4

1st approach--using Set operator (time complexity reduced but space complexity inc)
------------------------------------------------------------------------------------------------

import java.util.HashSet;
class HelloWorld {
    public static void main(String[] args) {
        int arr[]= {1,2,3,4,4,3,2,1,0,0};
        lonelyInteger(arr);
    }
    public static int lonelyInteger(int n[])
    {
        
       HashSet<Integer> hs = new HashSet<Integer>();
       for(int i:n)
       {
           if(hs.contains(i))
           {
               hs.remove(i);
           }
           else
           {
               hs.add(i);
           }
       }
         if(hs.size()!=0)
            {
        for(int i:hs)
        {
           System.out.println("Lonely Integer is:"+i);
                    
        }}
            else
            {
                System.out.println("No Lonely Integer availabe");
            }
             return -1;
        }
       
    }
------------------------------------------------------------------------------------------------
2nd-- By Using xor operator (time and space complexity both reduced)
XOR-- If we perfrom XOR operation with number itself then output is always 0. Example -- 5 XOR 5 =0 
      If we perfrom XOR operation of number with Zero then output will be number itself. Example -- 5 XOR 0 =5
So if there are pair in XOR then they will cancel itself and only lonely integer will left.Example --(5 ^5^6)=6

--------------------------------------------------------------------------------------------------------
class HelloWorld {
    public static void main(String[] args) {
        int arr[]= {1,2,3,4,3,2,1};
        System.out.println(lonelyInteger(arr));
    }
    public static int lonelyInteger(int n[])
    {
        int result=0;
      for(int i: n)
      {
          result = result ^ i; 
      }
      return result;
       
    }
}

