*********Fibonaci series ******************************
class HelloWorld {
    public static void main(String[] args) {
       int a=0;
       int b=1;
       int c;
        System.out.println(a);
        System.out.println(b);
       for(int i=2;i<20;i++)
       {
       c = a+b;
       a=b;
       b=c;
       System.out.println(c);
            
       }
    }
}

***************Factorial of a given number ***********
class HelloWorld {
    public static void main(String[] args) {
       int num =7;
       int fact =1;
       for(int i=1;i<=num;i++)
       {
           fact =fact*i;
          
       }
          System.out.println("factorial is:"+fact);   
       }
    }

**************Prime number ***********

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class HelloWorld {
    
    public static void main(String[] args) {
        boolean prime=true;
     int num =31;
     for(int i=2;i<num;i++)
     {
         if(num%i==0)
         {
              
             prime=false;
             break;
         }
         else
         {
             
             prime = true;
         }
     }
     if(prime)
     {
         System.out.println("number is prime");
     }
     else
     {
          System.out.println("number is not prime");
     }
    }
}
**************Prime number from 1 to n ***********

using Seive algorithm

1. Create boolean array of 1 size extra and mark all numbers as false/unmarked initially.
2. loop from i=2 to n.
3. check if (number is unmarked/false) then mark all its multiple(mark=true and unmark=false);
4. else do  nothing
5. print all unmarked numbers.

package test;
import java.util.Scanner;

public class prime {
 
 public static void main(String[] args) {
     int j;
     Scanner sc= new Scanner(System.in);
     System.out.println("Enter Size");
     int n= sc.nextInt();
     boolean prime[]=new boolean[n+1];
     System.out.println("Size of array is"+prime.length);
     for(int i=2;i<=n;i++)
     {
         if(prime[i]==false)
         {
             for(j=i*2;j<=n;j=j+i)
             {
                  prime[j]=true;
             }
            
         }
     }
     for(int i=2;i<=n;i++)
     {
    	 if(!prime[i])
    	 {
    		 System.out.println(i);
    	 }
         
     }

 }
}
https://www.youtube.com/watch?v=PTOb0ZdBv8s&list=PLU83Ru7iGtAvP1rqt65MCDSBPFCzUKGXG&index=14

the above logic can also be enhanced if marking only the first unmarked number, do check the above video.

***************** Print all the divisors of a given number *************************
optimized approach

1. Loop from 1 to root(num).
2. check if (num % I ==0)--print factors.
3. divide (num/i) to print the remaining factors.

Logic --- for number 45 factors are [1,45,3,15,5,9] ---we don't need to loop till the 45, root of 45 is sufficient.
second diviser can be obtained from the first diviser using second = num/first.



// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class HelloWorld {
    public static void main(String[] args) {
        int num =45;
        int i=0;
        for(i=1;i*i <=num;i++)
        {
            if(num % i==0)
            {
                System.out.println(i); //first diviser
                if(i!=num/i)
                {
                   System.out.println(num/i);  //second diviser
                }
            }
        }
    }
}
*************************** Calculate Armstrong number *********************************
import java.util.Scanner;

public class Demo {
    public static void main(String[] args) {
        
        int rem, sum;
        
        for (int i = 100; i <= 500; i++) {
            int originalNum = i;
            sum = 0;
            int num = i;
            
            while (num != 0) {
                rem = num % 10;
                sum = sum + rem * rem * rem;
                num = num / 10;
            }
            
            if (sum == originalNum) {
                System.out.println(i + " is an Armstrong number");
            }
        }
    }
}
*********************** Check Neon number ***********************************
ip-9 (Neon number == 9*9=81, 8+1=9)
op --yes

import java.util.Scanner;

class NeonNumber {
    public static void main(String[] args) {
        
        int num = 9;

        // Step 1: Square the number
        int square = num * num;

        // Step 2: Calculate the sum of the digits
        int sum = 0;
        int temp = square;
        while (temp != 0) {
            int rem = temp % 10;
            sum += rem;
            temp = temp/10;
        }

        // Step 3: Check if it is a Neon Number
        if (sum == num) {
            System.out.println(num + " is a Neon Number.");
        } else {
            System.out.println(num + " is not a Neon Number.");
        }
    }
}
