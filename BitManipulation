** for bit on --always use OR
** for bit off --always use AND

always shift left number by a bit ( pos << 1)
to flip ~(pos << 1)

*****************************************************************************
Q-1 : Program To Find The Position Of Right Most Set Bit 
*****************************************************************************
Algo-- take a mask and perform and operation, if result is zero then set bit is not found.
      Left shift the mask by one pos and again perform and operation.
do this until right most bit is found.
*****************************************************************************
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Scanner;
class HelloWorld {
    static int returnpos(int n){
        
        int mask =1;
        int pos =0;
        if(n==0){
            return -1;
        }
        while((n&m)==0)
        {
            m=m<<1;
            pos++;
        }
        return pos+1;
        
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        System.out.println(returnpos(n));
       
    }
}
********************************************************************
Q-2 : Write a Java program to check if given number is power of 2
Algo-Brian Kernigham --- check if (n & (n-1)==0) if yes then the no is the power of 2 else not.
********************************************************************

import java.util.Scanner;
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        System.out.println(checkPowerOfTwo(num));
    }
    public static boolean checkPowerOfTwo(int num)
    {
        if(num==0)
        {
            return false;
        }
       return (num & (num-1))==0;
            
        }
        
    }
********************************************************************
Q-3 : WAP to find out the no of bits to be flipped from converting one integer to another
lOGIC-- pERFORM XOR of both the numbers and then count the no of set bits.
********************************************************************

import java.util.Scanner;
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num1 = sc.nextInt();
        int num2 = sc.nextInt();
        System.out.println(countFlipped(num1,num2));
    }
    public static int countFlipped(int num1,int num2)
    {
        int n = num1^num2;
        int count =0;
        System.out.println(n);
        while(n!=0)
        {
            n= n & (n-1);
            count++;
        }
        return count;
        
    }
}
*************************************************************************
Q-4 : WAP to count the no of set bits (no of 1's)
Logic-- check (n&(n-1)) and inc the counter
n & (n-1) results in the last bit flipped of n
*************************************************************************

import java.util.Scanner;
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num1 = sc.nextInt();
     
        System.out.println(countFlipped(num1));
    }
    public static int countFlipped(int n)
    {
        
        int count =0;
       
        while(n!=0)
        {
            n= n & (n-1);
            count++;
        }
        return count;
        
    }
}
*************************************************************************
Q-5 : WAP to check if given number is power of 4?
Logic--Given number is power of 4 if the number is power of 2 and if divided by 3 reminder is 1
logic --((n & (n - 1)) == 0) && (n % 3 == 1);
*************************************************************************
Q-6: WAP to calculate the Length Of Consecutive 1's In The Binary Representation
Observation: If we perform and operation between a number and (number << 1) then the output will never be zero if there are consecutive ones.
            Else output will be zero.
To count the no of consecutive ones we need to repeat the above logic till the number is greater than zero.
***************************************************************************************************

import java.util.Scanner;
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
       System.out.println(countConsecutiveOnes(num));
    }
    
    public static int countConsecutiveOnes(int n)
    {
        int count =0;
        while(n!=0)
        {
            n= (n & (n<<1));
            count++;
        }
        return count;
    }
}
**********************************************************************************************************************************************************
Q - WAP to swap all even and odd bits.
Logic -- Perform AND operation between num and (0xAAAAAAAA). Then perform (&) operation between (0x55555555). Finally, combine the above 2 results using OR operation.
_TimeComplexity -O(1)_____________________________________________________________________________________________________________________________________
https://www.youtube.com/watch?v=tNMgJpDMUNs&list=PLU83Ru7iGtAvP1rqt65MCDSBPFCzUKGXG&index=26
